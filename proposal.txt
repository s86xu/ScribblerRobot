Project Description
I propose to make a PongBot which is the classic arcade computer game: Pong, played using the robot. The robot would be the ball int the game, it would “bounce” between two drawn lines, note that the robot is incapable of sudden change in it's direction without stopping so it would turn to the correct direction while moving. The game would have a two player and a one player mode which the user selects. In the two player mode the players would move obstacles which would act as the paddles. When the robot detects a paddle it would turn back and continue bouncing until it crosses a drawn goal line, if it does then it would update the scores and return to the centre of the field and would start moving in a random direction and with a random, but not too slow speed after a two second wait time.  In the one player mode the second paddle would be controlled by the program.
The game would also include a graphic interface displaying the robot's position on the field, the score, the detected borders and paddles. In the one player mode the second paddle would be only visible in the window. The initial game set up would take place on this interface such as selecting the game mode, determining the field details and starting the game. There would be an option to reset the starting position and the field variables this way you don't have to in case something changes and there would be an option to pause the game.
Features
The robot would use the motors to move around in the field, the line sensor to detect the borders of the field and the IR obstacle sensors on the fluke board to detect the paddles as they are more accurate than the built in IR sensors [1].
The program would use math python module for trigonometric and other mathematical calculations for the calculation of it's path[2]. For the implementation of a UI and for the basic functions of the robot such as movement and reading sensor values the myro (or Myro) module would be used.
Design Challenges & Risks
As earlier stated in the game Pong, as soon as the ball touches a side border it's movement immediately gets reflected on the y axis and when it touches a paddle it gets reflected instantaneously on the x axis, the robot is unable to do so, it has to stop to make such a turn and that would cause frequent stops in the game, as a solution it should move with constant speed while changing direction. This would also cause the robot to move outside of the borders for a short period of time and it would make it crash into paddles, this can be solved by drawing the border lines  closer to the centre than the actual borders and making the robot turn with an acceleration vector which would get it into the desired path, as for the paddle problem the robot should start turning a distance away from the paddle to avoid collisions.
Another risk factor is the inconsistency of the robot's movement. This error could cause the calculated position to be different from the  actual location of the robot on the field and it would make the robot behave differently under similar conditions. This inconsistency depends on the battery level and the voltage drops in the robot as well as the friction between the wheels and the field. Faster movement results in higher error rate in the motor movements which can be a big problem for a scenario like this game where the robot is required to move faster.
Low battery level can cause other errors in the robot such as sensors being imprecise or not functioning at all. For this reason the battery level should be carefully monitored to avoid these problems.
Another problem could be the robot's behaviour in corners with the above adjustments. This problem could be solved with special algorithm for the movement which would make it take sharper turns.
